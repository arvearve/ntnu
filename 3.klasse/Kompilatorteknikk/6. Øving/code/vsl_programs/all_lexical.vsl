// Program to exercise all lexical entities.

INT FUNC main() START          // FUNC, identifier (func. def.)
    INT a;       // TYPE, identifier
    INT _a1;
    INT a_2;
    INT i;
    INT j;
    
    FLOAT f;
    BOOL b;
    PRINT "Hello, world!";       // PRINT keyword, string literal
	PRINT "";                    // Whitespace: line starts on a tab character
    PRINT "Hello, \"world\"!";   // String literal with escaped double quotes

    _a1 := 10;                   // Assignment operator and number constant
    a_2 := 2;

    a := _a1 + a_2 ;             // Plus operator
    PRINT _a1, "+", a_2, "=", a;

    a := _a1 - a_2 ;             // Minus operator
    PRINT _a1, "-", a_2, "=", a;

    a := _a1 + (-a_2) ;          // Parentheses, unary minus operator
    PRINT _a1, "+ (-", a_2, ") =", a;

    a := _a1 * a_2   ;           // Multiply operator
    PRINT _a1, "*", a_2, "=", a;

    a := _a1 / a_2  ;            // Divide operator
    PRINT _a1, "/", a_2, "=", b;

    b := _a1 > a_2  ;            // Greater than operator
    PRINT _a1, ">", a_2, "=", b;

    b := _a1 < a_2   ;           // Less than operator
    PRINT _a1, "<", a_2, "=", b;

    b := _a1 >= a_2;              // Greater than or equal than operator
    PRINT _a1, ">=", a_2, "=", b;

    b := _a1 <= a_2 ;             // Less than or equal operator
    PRINT _a1, "<=", a_2, "=", b;

    b := _a1 == a_2  ;            // Equal operator
    PRINT _a1, "==", a_2, "=", b;

    b := _a1 != a_2   ;           // Not equal  operator
    PRINT _a1, "!=", a_2, "=", b;

    IF ( b ) THEN               // IF, THEN, FI, single statement
        PRINT b;
    END

    // Testing while loop
    i := 10;
    WHILE ( i > 5 ) DO
        i := i - 1;
    END

    //Testing nested loop, multiplication table
    i := 1;
    WHILE ( i < 4 ) DO    
        j := 1;
        WHILE ( j < 4 ) DO
            PRINT i, "*", j, "=", i*j;
            j := 1 + j;
        END
        i := i + 1;
    END


    // This loop prints the integers 5 through 0, skipping 2
    a := 5;
    WHILE ( a ) DO              // WHILE/DO/END, block statements
        IF ( a - 3 ) THEN       // IF/THEN/ELSE/END
            a := a - 1;
        ELSE
            a := a - 2;
            PRINT "Skip...";
        END
        PRINT a;
    END

    RETURN 0   ;                 // RETURN keyword and number constant
END

